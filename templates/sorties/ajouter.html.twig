{% extends 'base.html.twig' %}

{% block title %}Ajouter une Sortie{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .invalid-feedback {
            display: block;
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }
        .is-invalid {
            border-color: #dc3545;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1 class="mb-4">Ajouter une Sortie</h1>

        {{ form_start(form, {'attr': {'data-turbo': 'false'}}) }}

        {# Récupération des erreurs globales + erreurs des dates #}
        {% set global_errors = form.vars.errors %}


        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    {{ form_label(form.nom, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.nom, {
                        'attr': {
                            'class': 'form-control' ~ (form.nom.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.nom.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.nom.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                {# Date de début — erreurs affichées en haut #}
                <div class="mb-3">
                    {{ form_label(form.dateDebut, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.dateDebut, {
                        'attr': {
                            'class': 'form-control' ~ (form.dateDebut.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.dateDebut.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.dateDebut.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                {# Date de clôture — erreurs affichées en haut #}
                <div class="mb-3">
                    {{ form_label(form.dateCloture, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.dateCloture, {
                        'attr': {
                            'class': 'form-control' ~ (form.dateCloture.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.dateCloture.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.dateCloture.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.nbInscriptionMax, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.nbInscriptionMax, {
                        'attr': {
                            'class': 'form-control' ~ (form.nbInscriptionMax.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.nbInscriptionMax.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.nbInscriptionMax.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.duree, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.duree, {
                        'attr': {
                            'class': 'form-control' ~ (form.duree.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.duree.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.duree.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.descriptionInfos, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.descriptionInfos, {
                        'attr': {
                            'class': 'form-control' ~ (form.descriptionInfos.vars.errors|length > 0 ? ' is-invalid' : ''),
                            'rows': 3
                        }
                    }) }}
                    {% if form.descriptionInfos.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.descriptionInfos.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <div class="mb-3">
                    {{ form_label(form.urlPhoto, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.urlPhoto, {
                        'attr': {
                            'class': 'form-control' ~ (form.urlPhoto.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.urlPhoto.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.urlPhoto.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    {{ form_label(form.lieu, null, {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.lieu, {
                        'id': 'sortie_lieu',
                        'attr': {
                            'class': 'form-select' ~ (form.lieu.vars.errors|length > 0 ? ' is-invalid' : '')
                        }
                    }) }}
                    {% if form.lieu.vars.errors|length > 0 %}
                        <div class="invalid-feedback">
                            {% for error in form.lieu.vars.errors %}
                                {{ error.message }}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <fieldset class="border border-dark-subtle rounded-3 p-3">
                    <legend>Informations sur le lieu</legend>

                    {% set lieuActuel = infosLieu ?? {} %}

                    <div class="mb-3">
                        <p class="detail-label"><strong>Rue</strong></p>
                        <p class="detail-value" id="lieu-rue">{{ lieuActuel.rue ?? 'Non précisé' }}</p>
                    </div>

                    <div class="mb-3">
                        <p class="detail-label"><strong>Ville</strong></p>
                        <p class="detail-value" id="lieu-ville">{{ lieuActuel.ville ?? 'Non précisé' }}</p>
                    </div>

                    <div class="mb-3">
                        <p class="detail-label"><strong>Code Postal</strong></p>
                        <p class="detail-value" id="lieu-cp">{{ lieuActuel.cp ?? 'Non précisé' }}</p>
                    </div>

                    <div class="mb-3">
                        <p class="detail-label"><strong>Latitude</strong></p>
                        <p class="detail-value" id="lieu-latitude">{{ lieuActuel.latitude ?? 'Non précisé' }}</p>
                    </div>

                    <div class="mb-3">
                        <p class="detail-label"><strong>Longitude</strong></p>
                        <p class="detail-value" id="lieu-longitude">{{ lieuActuel.longitude ?? 'Non précisé' }}</p>
                    </div>
                </fieldset>

            </div>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary mt-2">Enregistrer</button>
            <a href="{{ path('sorties_liste') }}" class="btn btn-secondary mt-2">Retour à la liste</a>
        </div>

        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const lieuSelect = document.querySelector('#sortie_lieu');
            if (!lieuSelect) return;

            const fields = {
                rue: document.querySelector('#lieu-rue'),
                ville: document.querySelector('#lieu-ville'),
                cp: document.querySelector('#lieu-cp'),
                latitude: document.querySelector('#lieu-latitude'),
                longitude: document.querySelector('#lieu-longitude')
            };

            // 1. Si infosLieu est passé (après erreur), on l'utilise
            {% if infosLieu %}
            fields.rue.textContent = {{ infosLieu.rue|json_encode|raw }};
            fields.ville.textContent = {{ infosLieu.ville|json_encode|raw }};
            fields.cp.textContent = {{ infosLieu.cp|json_encode|raw }};
            fields.latitude.textContent = {{ infosLieu.latitude|json_encode|raw }};
            fields.longitude.textContent = {{ infosLieu.longitude|json_encode|raw }};
            {% endif %}

            async function updateLieuInfo() {
                const lieuId = lieuSelect.value;
                if (!lieuId) {
                    Object.values(fields).forEach(el => el.textContent = 'Non précisé');
                    return;
                }

                try {
                    const response = await fetch(`/lieux/infos/${lieuId}`);
                    if (!response.ok) throw new Error('Erreur serveur');
                    const data = await response.json();

                    fields.rue.textContent = data.rue || 'Non précisé';
                    fields.ville.textContent = data.ville || 'Non précisé';
                    fields.cp.textContent = data.codePostal || 'Non précisé';
                    fields.latitude.textContent = data.latitude || 'Non précisé';
                    fields.longitude.textContent = data.longitude || 'Non précisé';
                } catch (err) {
                    console.error(err);
                    Object.values(fields).forEach(el => el.textContent = 'Erreur');
                }
            }

            // 2. Fetch seulement si pas d'infosLieu
            {% if not infosLieu and form.lieu.vars.value %}
            updateLieuInfo();
            {% endif %}

            // 3. Toujours écouter le changement
            lieuSelect.addEventListener('change', updateLieuInfo);
        });
    </script>
{% endblock %}


